/**
 * Copyright IBM Corp. 2024-
 * SPDX-License-Identifier: Apache2.0
 */

import React, { useReducer, useEffect } from "react";
import { Activity, MessageQueue, AppConnectivity } from '@carbon/icons-react';

import {
	FlexGrid,
	Row,
	Column,
} from '@carbon/react';

import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from "recharts";

const Home = () => {
	const [randomNumbers, dispatchRandomNumbers] = useReducer(reducerRandomNumbers, []);
	
	useEffect(() => {
		
		//Assume that this is used to receive data from the random number emitter service
		const eventSourceRandomNumbers = new EventSource("http://localhost:8080/sse-random-numbers");

		eventSourceRandomNumbers.onmessage = (event) => {

			let number = event.data;

			let timestamp = new Date().toLocaleTimeString();
			let item = { timestamp: timestamp, number: number };
			const actionObj = { type: 'add', item: item };

			dispatchRandomNumbers(actionObj)
		}
		eventSourceRandomNumbers.onerror = (err) => {
			console.error("EventSource failed: " + err);
		};
		
		return () => {
			eventSourceRandomNumbers.close();
		};
	}, []);

	const [mqMessages, dispatchMqMessages] = useReducer(reducerMqMessages, []);
	useEffect(() => {
		//Assume that it is for messages from MQ
		const eventSourceMQ = new EventSource("http://localhost:8080/sse-mq");
		eventSourceMQ.onmessage = (event) => {
			let message = event.data;
			let timeInMilliseconds = Date.now();
			let item = { value: message, time: timeInMilliseconds }
			const actionObj = { type: 'add', item: item };
			dispatchMqMessages(actionObj)
		}
		return () => {
			eventSourceMQ.close();
		};
	}, []);
	
	//Assume that it is for messages from ACE (IBM App Connect)
	const [aceMessages, dispatchAceMessages] = useReducer(reducerAceMessages, []);
	useEffect(() => {
		const eventSourceAce = new EventSource("http://localhost:8080/sse-ace");
		eventSourceAce.onmessage = (event) => {
			let message = event.data;
			let timeInMilliseconds = Date.now();
			let item = { value: message, time: timeInMilliseconds }
			const actionObj = { type: 'add', item: item };
			dispatchAceMessages(actionObj)
		}
		return () => {
			eventSourceAce.close();
		};
	}, []);


	return <>
		<FlexGrid fullWidth style={{margin: 0, padding: 0, verticalAlign: 'top'}} >
			<Row className='row-padding' style={{marginTop: '0pt', marginBottom: '10pt'}} > 
				<Column><h5><Activity /> Random numbers being generated by a backend service <span className='blinking1'>...</span></h5></Column>
			</Row>
			<Row>
				<Column>
					<div style={{ display: "grid", placeItems: "center", fontSize: 'small' }}>
						<LineChart width={1000} height={300} data={randomNumbers}>
							<CartesianGrid strokeDasharray="3 3" />
							<XAxis dataKey="timestamp" />
							<YAxis domain={[1, 100]} />
							<Tooltip />
							<Legend />
							<Line type="monotone" dataKey="number" stroke="#0c6896" />
						</LineChart>
					</div>
					<RandomNumbers data={randomNumbers}/>
				</Column>
			</Row>
			<Row className='row-padding'><Column><hr className="solid" /></Column></Row>
			<Row>
				<Column>
					<p style={{fontWeight: 'bold'}}><MessageQueue /> IBM MQ <span className='blinking1'>...</span></p>
					<MessageList data={mqMessages}/>
				</Column>
				<Column>
					<p style={{fontWeight: 'bold'}}><AppConnectivity /> IBM App Connect (ACE) <span className='blinking2'>...</span></p>
					<MessageList data={aceMessages}/>
				</Column>
			</Row>
		</FlexGrid>
	</>;
};

function reducerRandomNumbers(state, action) {
	return reducerHelper(state, action, 30);
}

function reducerMqMessages(state, action) {
	return reducerHelper(state, action, 10);
}

function reducerAceMessages(state, action) {
	return reducerHelper(state, action, 10);
}

function reducerHelper(state, action, maxNumberOfItems){
	let newState;
	switch (action.type) {
		case 'add':
			newState = [...state, action.item];
			if (newState.length > maxNumberOfItems) {
				newState.shift();
			}
			break;
		default:
			throw new Error();
	}
	return newState;
}


function RandomNumbers(props) {
	let strNumbers = props.data.map((item) => ' ' + item.number);
	let str;
	if (strNumbers.length === 0)
      str = strNumbers;
    else 
      str = '...' + strNumbers;
    
	return (
		<div style={{ fontSize: 'small', textAlign: 'center'}} >{str}</div>
	);
}

function MessageList(props) {
	let items1 = props.data.map((item, index) => {
		const itemId = index + '_' + item.time;
		return { id: itemId, value: item.value};
	}).reverse();
	
	let items2 = items1.map((item, index) => {
		let brightness = 90;
		if(index < 9)
			brightness = 10*index;

		const itemStyle = {color: 'hsl(0, 0%, ' + brightness + '%)', fontSize: 'small', fontFamily: 'Courier'}
		console.log(itemStyle);
		return { id: item.id, value: item.value, cssStyle: itemStyle};
	});
	
	//using itemId is to resolve "Each child in a list should have a unique "key" prop."
	return (
		<div>
			<ul>
				{items2.map((item) => (<li key={item.id}>
					<span style={item.cssStyle}>{item.value}</span>
				</li>))
				}
			</ul>
		</div>
	);
}

export default Home;